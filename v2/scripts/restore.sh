#!/bin/bash

# RSS Summarizer v2 - Restore Script
# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏

set -e

if [ -z "$1" ]; then
    echo "‚ùå Usage: ./scripts/restore.sh <backup_directory_or_archive>"
    echo "üìÇ Example: ./scripts/restore.sh ./backups/20241231_120000"
    echo "üì¶ Example: ./scripts/restore.sh ./backups/backup.tar.gz"
    exit 1
fi

BACKUP_SOURCE="$1"
TEMP_DIR=""

# –ï—Å–ª–∏ —ç—Ç–æ –∞—Ä—Ö–∏–≤, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
if [[ "$BACKUP_SOURCE" == *.tar.gz ]]; then
    echo "üì¶ Extracting backup archive..."
    TEMP_DIR="./temp_restore_$(date +%s)"
    mkdir -p "$TEMP_DIR"
    tar -xzf "$BACKUP_SOURCE" -C "$TEMP_DIR"
    BACKUP_DIR="$TEMP_DIR/$(ls $TEMP_DIR | head -n1)"
else
    BACKUP_DIR="$BACKUP_SOURCE"
fi

echo "üîÑ RSS Summarizer v2 - Restore Starting..."
echo "üìÅ Restore from: $BACKUP_DIR"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –±—ç–∫–∞–ø–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -d "$BACKUP_DIR" ]; then
    echo "‚ùå Backup directory not found: $BACKUP_DIR"
    exit 1
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ
if [ -f "$BACKUP_DIR/backup_info.txt" ]; then
    echo "üìã Backup Information:"
    cat "$BACKUP_DIR/backup_info.txt"
    echo ""
    read -p "Continue with restore? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Restore cancelled"
        exit 1
    fi
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "‚èπÔ∏è Stopping containers..."
docker-compose down || true

# 1. Configuration - –ù–ï –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–¢–°–Ø
echo "‚ÑπÔ∏è  Note: Using repository files (docker-compose.yml, db/init.sql)"
echo "‚ÑπÔ∏è  Note: Backup contains only data, not configuration"

# 2. Restore Application Data
echo "üìÇ Restoring application data..."
if [ -d "$BACKUP_DIR/data" ]; then
    if [ -d "./data" ]; then
        rm -rf ./data.backup.$(date +%s) 2>/dev/null || true
        mv ./data ./data.backup.$(date +%s) 2>/dev/null || true
    fi
    cp -r "$BACKUP_DIR/data" .
    echo "‚úÖ Application data restored"
fi

if [ -d "$BACKUP_DIR/logs" ]; then
    if [ -d "./logs" ]; then
        rm -rf ./logs.backup.$(date +%s) 2>/dev/null || true
        mv ./logs ./logs.backup.$(date +%s) 2>/dev/null || true
    fi
    cp -r "$BACKUP_DIR/logs" .
    echo "‚úÖ Logs restored"
fi

# 3. Start Database Container
echo "üê≥ Starting PostgreSQL container..."
docker-compose up -d postgres
echo "‚è≥ Waiting for PostgreSQL to be ready..."
sleep 15

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ PostgreSQL –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
RETRIES=0
MAX_RETRIES=30
while ! docker exec v2-postgres-1 pg_isready -U newsuser -d newsdb > /dev/null 2>&1; do
    RETRIES=$((RETRIES + 1))
    if [ $RETRIES -eq $MAX_RETRIES ]; then
        echo "‚ùå PostgreSQL failed to start after $MAX_RETRIES attempts"
        exit 1
    fi
    echo "‚è≥ Waiting for PostgreSQL... ($RETRIES/$MAX_RETRIES)"
    sleep 2
done

# 4. Restore Database
echo "üìä Restoring database..."
if [ -f "$BACKUP_DIR/database.sql" ]; then
    echo "üì• Importing database dump..."
    docker exec -i v2-postgres-1 psql -U newsuser -d newsdb < "$BACKUP_DIR/database.sql"
    echo "‚úÖ Database restored"
else
    echo "‚ö†Ô∏è database.sql not found, starting with fresh database"
    echo "üîß Running database migrations..."
    docker exec v2-postgres-1 psql -U newsuser -d newsdb -f /docker-entrypoint-initdb.d/01_init.sql
fi

# 5. Start All Services
echo "üöÄ Starting all services..."
docker-compose up -d

echo "‚è≥ Waiting for services to start..."
sleep 10

# 6. Verify Services
echo "üîç Verifying services..."
if docker-compose ps | grep -q "Up"; then
    echo "‚úÖ Services are running"
else
    echo "‚ö†Ô∏è Warning: Some services may not be running properly"
    docker-compose ps
fi

# Cleanup
if [ -n "$TEMP_DIR" ]; then
    rm -rf "$TEMP_DIR"
fi

echo ""
echo "‚úÖ Restore completed successfully!"
echo "üåê Service should be available at: http://localhost:8000"
echo "üîß Admin panel: http://localhost:8000/admin"
echo ""
echo "üìä To verify the restore:"
echo "   docker-compose logs -f app"
echo "   curl http://localhost:8000/api/v1/sources" 